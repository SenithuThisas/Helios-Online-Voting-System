{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Something went wrong');\n      }\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Auth endpoints\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async verifyOTP(userId, otp) {\n    return this.request('/auth/verify-otp', {\n      method: 'POST',\n      body: JSON.stringify({\n        userId,\n        otp\n      })\n    });\n  }\n  async resendOTP(userId) {\n    return this.request('/auth/resend-otp', {\n      method: 'POST',\n      body: JSON.stringify({\n        userId\n      })\n    });\n  }\n  async getCurrentUser() {\n    return this.request('/auth/me');\n  }\n  async logout() {\n    return this.request('/auth/logout', {\n      method: 'POST'\n    });\n  }\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n\n  // Election endpoints\n  async getElections() {\n    return this.request('/elections');\n  }\n  async getElection(id) {\n    return this.request(`/elections/${id}`);\n  }\n  async vote(electionId, candidateId) {\n    return this.request('/votes', {\n      method: 'POST',\n      body: JSON.stringify({\n        electionId,\n        candidateId\n      })\n    });\n  }\n  async getVotingHistory() {\n    return this.request('/votes/history');\n  }\n\n  // Admin endpoints\n  async createElection(electionData) {\n    return this.request('/admin/elections', {\n      method: 'POST',\n      body: JSON.stringify(electionData)\n    });\n  }\n  async createCandidate(candidateData) {\n    return this.request('/admin/candidates', {\n      method: 'POST',\n      body: JSON.stringify(candidateData)\n    });\n  }\n  async getElectionResults(electionId) {\n    return this.request(`/admin/elections/${electionId}/results`);\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","request","endpoint","options","url","config","headers","token","localStorage","getItem","Authorization","response","fetch","data","json","ok","Error","message","error","console","login","credentials","method","body","JSON","stringify","verifyOTP","userId","otp","resendOTP","getCurrentUser","logout","register","userData","getElections","getElection","id","vote","electionId","candidateId","getVotingHistory","createElection","electionData","createCandidate","candidateData","getElectionResults"],"sources":["C:/Users/ADMIN/Desktop/Helios-Online-Voting-System/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    // Add auth token if available\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Something went wrong');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Auth endpoints\r\n  async login(credentials) {\r\n    return this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n  }\r\n\r\n  async verifyOTP(userId, otp) {\r\n    return this.request('/auth/verify-otp', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ userId, otp }),\r\n    });\r\n  }\r\n\r\n  async resendOTP(userId) {\r\n    return this.request('/auth/resend-otp', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ userId }),\r\n    });\r\n  }\r\n\r\n  async getCurrentUser() {\r\n    return this.request('/auth/me');\r\n  }\r\n\r\n  async logout() {\r\n    return this.request('/auth/logout', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  // Election endpoints\r\n  async getElections() {\r\n    return this.request('/elections');\r\n  }\r\n\r\n  async getElection(id) {\r\n    return this.request(`/elections/${id}`);\r\n  }\r\n\r\n  async vote(electionId, candidateId) {\r\n    return this.request('/votes', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ electionId, candidateId }),\r\n    });\r\n  }\r\n\r\n  async getVotingHistory() {\r\n    return this.request('/votes/history');\r\n  }\r\n\r\n  // Admin endpoints\r\n  async createElection(electionData) {\r\n    return this.request('/admin/elections', {\r\n      method: 'POST',\r\n      body: JSON.stringify(electionData),\r\n    });\r\n  }\r\n\r\n  async createCandidate(candidateData) {\r\n    return this.request('/admin/candidates', {\r\n      method: 'POST',\r\n      body: JSON.stringify(candidateData),\r\n    });\r\n  }\r\n\r\n  async getElectionResults(electionId) {\r\n    return this.request(`/admin/elections/${electionId}/results`);\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}