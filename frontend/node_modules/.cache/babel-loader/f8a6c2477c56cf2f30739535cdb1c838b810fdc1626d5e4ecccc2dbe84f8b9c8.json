{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\Helios-Online-Voting-System\\\\frontend\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [loginStep, setLoginStep] = useState('login'); // 'login', 'otp', 'success'\n  const [loginData, setLoginData] = useState(null);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const user = localStorage.getItem('user');\n    const token = localStorage.getItem('token');\n    if (user && token) {\n      setCurrentUser(JSON.parse(user));\n    }\n    setLoading(false);\n  }, []);\n  const login = async credentials => {\n    try {\n      const response = await api.login(credentials);\n\n      // Store login data for OTP verification\n      setLoginData({\n        userId: response.userId,\n        email: credentials.email,\n        otp: response.otp,\n        // For development only\n        expiresIn: response.expiresIn\n      });\n      setLoginStep('otp');\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const verifyOTP = async otp => {\n    try {\n      if (!loginData) {\n        throw new Error('No login session found');\n      }\n      const response = await api.verifyOTP(loginData.userId, otp);\n\n      // Store token and user data\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      setCurrentUser(response.user);\n      setLoginStep('success');\n      setLoginData(null);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const resendOTP = async () => {\n    try {\n      if (!loginData) {\n        throw new Error('No login session found');\n      }\n      const response = await api.resendOTP(loginData.userId);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      // Call logout API if user is logged in\n      if (currentUser) {\n        await api.logout();\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local storage regardless of API call result\n      setCurrentUser(null);\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      setLoginStep('login');\n      setLoginData(null);\n    }\n  };\n  const updateUser = userData => {\n    setCurrentUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n  const resetLoginFlow = () => {\n    setLoginStep('login');\n    setLoginData(null);\n  };\n  const value = {\n    currentUser,\n    login,\n    verifyOTP,\n    resendOTP,\n    logout,\n    updateUser,\n    loading,\n    loginStep,\n    loginData,\n    resetLoginFlow,\n    isAdmin: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'admin',\n    isExecutive: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'executive',\n    isVoter: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'voter'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Li/pCtaSWNNzFj8gj3nDpnwK2Vk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","loginStep","setLoginStep","loginData","setLoginData","user","localStorage","getItem","token","JSON","parse","login","credentials","response","userId","email","otp","expiresIn","error","verifyOTP","setItem","stringify","resendOTP","logout","console","removeItem","updateUser","userData","resetLoginFlow","value","isAdmin","role","isExecutive","isVoter","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/Helios-Online-Voting-System/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [loginStep, setLoginStep] = useState('login'); // 'login', 'otp', 'success'\r\n  const [loginData, setLoginData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in from localStorage\r\n    const user = localStorage.getItem('user');\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (user && token) {\r\n      setCurrentUser(JSON.parse(user));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const response = await api.login(credentials);\r\n      \r\n      // Store login data for OTP verification\r\n      setLoginData({\r\n        userId: response.userId,\r\n        email: credentials.email,\r\n        otp: response.otp, // For development only\r\n        expiresIn: response.expiresIn\r\n      });\r\n      \r\n      setLoginStep('otp');\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const verifyOTP = async (otp) => {\r\n    try {\r\n      if (!loginData) {\r\n        throw new Error('No login session found');\r\n      }\r\n\r\n      const response = await api.verifyOTP(loginData.userId, otp);\r\n      \r\n      // Store token and user data\r\n      localStorage.setItem('token', response.token);\r\n      localStorage.setItem('user', JSON.stringify(response.user));\r\n      \r\n      setCurrentUser(response.user);\r\n      setLoginStep('success');\r\n      setLoginData(null);\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const resendOTP = async () => {\r\n    try {\r\n      if (!loginData) {\r\n        throw new Error('No login session found');\r\n      }\r\n\r\n      const response = await api.resendOTP(loginData.userId);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Call logout API if user is logged in\r\n      if (currentUser) {\r\n        await api.logout();\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      // Clear local storage regardless of API call result\r\n      setCurrentUser(null);\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('token');\r\n      setLoginStep('login');\r\n      setLoginData(null);\r\n    }\r\n  };\r\n\r\n  const updateUser = (userData) => {\r\n    setCurrentUser(userData);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n  };\r\n\r\n  const resetLoginFlow = () => {\r\n    setLoginStep('login');\r\n    setLoginData(null);\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    verifyOTP,\r\n    resendOTP,\r\n    logout,\r\n    updateUser,\r\n    loading,\r\n    loginStep,\r\n    loginData,\r\n    resetLoginFlow,\r\n    isAdmin: currentUser?.role === 'admin',\r\n    isExecutive: currentUser?.role === 'executive',\r\n    isVoter: currentUser?.role === 'voter'\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}